// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tictactoe.proto

package protogalaxy.tictactoe.proto;

/**
 * Protobuf enum {@code tictactoe.Mark}
 */
public enum Mark
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>EMPTY = 0;</code>
   */
  EMPTY(0, 0),
  /**
   * <code>X = 1;</code>
   */
  X(1, 1),
  /**
   * <code>Y = 2;</code>
   */
  Y(2, 2),
  UNRECOGNIZED(-1, -1),
  ;

  /**
   * <code>EMPTY = 0;</code>
   */
  public static final int EMPTY_VALUE = 0;
  /**
   * <code>X = 1;</code>
   */
  public static final int X_VALUE = 1;
  /**
   * <code>Y = 2;</code>
   */
  public static final int Y_VALUE = 2;


  public final int getNumber() {
    if (index == -1) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  public static Mark valueOf(int value) {
    switch (value) {
      case 0: return EMPTY;
      case 1: return X;
      case 2: return Y;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Mark>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<Mark>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Mark>() {
          public Mark findValueByNumber(int number) {
            return Mark.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protogalaxy.tictactoe.proto.Tictactoe.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final Mark[] VALUES = values();

  public static Mark valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private Mark(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:tictactoe.Mark)
}

